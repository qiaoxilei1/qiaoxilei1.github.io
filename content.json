{"pages":[],"posts":[{"title":"base64编解码c++实现","text":"这两天在为公司的框架添加一个Base64加解密的模块，于是就想分享一下Base64的原理及自己的C++实现。 Base64简介Base64是一种字节编码方式，一个字节可表示256个值，那么ASCII中0x20 ~ 0x7E是可打印字符，也就是说只有这么些范围的字符打印出来是可见的。Base64编码就是把字节转化成ASCII码中可打印的字符(Base64编码是从二进制到可见字符的过程)。它是一种任意二进制到文本字符串的编码方法，常用于在URL、Cookie、网页中传输少量二进制数据。 Base64应用 由于二进制的一些字符在网络协议中属于控制字符，不能直接传送，因此需要用Base64编码之后传输，编码之后传输的是一些很普通的ASCII字符。 Base64常用于邮件编码，当邮件中有二进制数据时，就要编码转换。 图片的编码 Url中有二进制数据，这个时候需要Base64编码(Web安全的Base64) 可以进行简单的加密，Base64的编解码规则是透明的，因此用Base64加密时要加盐。 Base64原理用一句话来说明Base64编码的原理：“把3个字节变成4个字节”。 这么说吧，3个字节一共24个bit，把这24个bit依次分成4个组，每个组6个bit，再把这6个bit塞到一个字节中去(最高位补两个0就变成8个bit)，就会变成4个字节。没了。 因为6个bit最多能表示26=6426=64，也就是说Base64编码出来的字符种类只有64个，这也是Base64名字的由来。 那我们就要从ASCII中0x20 ~ 0x7E是可打印字符选出64个普通的ASCII字符 下面就是映射表(来自维基百科)： 加密之后形成的密文长度一定是4的倍数，且字符串中的字符一定要在映射表中，或者字符为=，还有，只可能有一个=或一个==。 代码如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172#include &lt;iostream&gt;#include &lt;string&gt;#include &lt;ctime&gt; //base64 编解码函数声明std::string b64encodestring(const std::string &amp;strString); //对 ASCII 字符串进行 base64 编码std::string b64decodestring(const std::string &amp;strString); //对 base64 编码后的字符串进行解码 //base64 编解码函数实现/*** @brief 对 ASCII 字符串进行 base64 编码** @param strString 待编码的字符串** @return srs::string 返回编码后的字符串** @note 对于字符串中含有非 ASCII 字符串型的字符, 代码将抛出 std::string 型异常, 请捕获*/std::string b64encodestring(const std::string &amp;strString){ int nByteSrc = strString.length(); std::string pszSource = strString; int i = 0; for(i; i &lt; nByteSrc; i++) if( pszSource[i] &lt; 0 || pszSource[i] &gt; 127 ) throw \"can not encode Non-ASCII characters\"; const char *enkey = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\"; std::string pszEncode(nByteSrc*4/3 + 4, '\\0'); int nLoop = nByteSrc %3 == 0 ? nByteSrc : nByteSrc - 3; int n = 0; for(i=0; i &lt; nLoop; i+=3 ) { pszEncode[n] = enkey[pszSource[i]&gt;&gt;2]; pszEncode[n+1] = enkey[((pszSource[i]&amp;3)&lt;&lt;4) | ((pszSource[i+1] &amp; 0xF0)&gt;&gt;4)]; pszEncode[n+2] = enkey[((pszSource[i+1] &amp; 0x0f)&lt;&lt;2) | ((pszSource[i+2] &amp; 0xc0 )&gt;&gt;6)]; pszEncode[n+3] = enkey[pszSource[i+2] &amp; 0x3F]; n += 4; } switch(nByteSrc%3) { case 0: pszEncode[n] = '\\0'; break; case 1: pszEncode[n] = enkey[pszSource[i]&gt;&gt;2]; pszEncode[n+1] = enkey[((pszSource[i]&amp;3)&lt;&lt;4) | ((0&amp;0xf0)&gt;&gt;4)]; pszEncode[n+2] = '='; pszEncode[n+3] = '='; pszEncode[n+4] = '\\0'; break; case 2: pszEncode[n] = enkey[pszSource[i]&gt;&gt;2]; pszEncode[n+1] = enkey[((pszSource[i]&amp;3)&lt;&lt;4) | ((pszSource[i+1]&amp;0xf0)&gt;&gt;4)]; pszEncode[n+2] = enkey[(( pszSource[i+1]&amp;0xf)&lt;&lt;2 ) | ((0&amp;0xc0)&gt;&gt;6)]; pszEncode[n+3] = '='; pszEncode[n+4] = '\\0'; break; } return pszEncode.c_str();} /*** @brief 对 base64 编码后的字符串进行解码** @param strString 待解码的字符串** @return std::string 返回解码后的字符串** @note 对于非base64编码的字符串或已损坏的base64字符串进行解码会抛出 std::string 型异常, 请捕获*/std::string b64decodestring(const std::string &amp;strString){ int nByteSrc = strString.length(); std::string pszSource = strString; const int dekey[] = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, // '+' -1, -1, -1, 63, // '/' 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, // '0'-'9' -1, -1, -1, -1, -1, -1, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, // 'A'-'Z' -1, -1, -1, -1, -1, -1, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, // 'a'-'z' }; if(nByteSrc%4 != 0) throw \"bad base64 string\"; std::string pszDecode(nByteSrc*3/4+4, '\\0'); int nLoop = pszSource[nByteSrc-1] == '=' ? nByteSrc - 4 : nByteSrc; int b[4]; int i = 0, n = 0; for(i = 0; i &lt; nLoop; i += 4 ) { b[0] = dekey[pszSource[i]]; b[1] = dekey[pszSource[i+1]]; b[2] = dekey[pszSource[i+2]]; b[3] = dekey[pszSource[i+3]]; if(b[0] == -1 || b[1] == -1 || b[2] == -1 || b[3] == -1) throw \"bad base64 string\"; pszDecode[n] = (b[0] &lt;&lt; 2) | ((b[1] &amp; 0x30) &gt;&gt; 4); pszDecode[n+1] = ((b[1] &amp; 0xf) &lt;&lt; 4) | ((b[2] &amp; 0x3c) &gt;&gt; 2); pszDecode[n+2] = ((b[2] &amp; 0x3) &lt;&lt; 6) | b[3]; n+=3; } if( pszSource[nByteSrc-1] == '=' &amp;&amp; pszSource[nByteSrc-2] == '=' ) { b[0] = dekey[pszSource[i]]; b[1] = dekey[pszSource[i+1]]; if(b[0] == -1 || b[1] == -1) throw \"bad base64 string\"; pszDecode[n] = (b[0] &lt;&lt; 2) | ((b[1] &amp; 0x30) &gt;&gt; 4); pszDecode[n+1] = '\\0'; } if( pszSource[nByteSrc-1] == '=' &amp;&amp; pszSource[nByteSrc-2] != '=' ) { b[0] = dekey[pszSource[i]]; b[1] = dekey[pszSource[i+1]]; b[2] = dekey[pszSource[i+2]]; if(b[0] == -1 || b[1] == -1 || b[2] == -1) throw \"bad base64 string\"; pszDecode[n] = (b[0] &lt;&lt; 2) | ((b[1] &amp; 0x30) &gt;&gt; 4); pszDecode[n+1] = ((b[1] &amp; 0xf) &lt;&lt; 4) | ((b[2] &amp; 0x3c) &gt;&gt; 2); pszDecode[n+2] = '\\0'; } if( pszSource[nByteSrc-1] != '=' &amp;&amp; pszSource[nByteSrc-2] != '=' ) pszDecode[n] = '\\0'; return pszDecode;} //测试int main(){ ///编码测试 std::string str1 = \"Hello, world!\"; std::cout &lt;&lt; \"对Hello, world!进行base64编码: \" &lt;&lt; b64encodestring(str1) &lt;&lt; std::endl; ///解码测试 std::string str2 = \"SGVsbG8sIHdvcmxkIQ==\"; std::cout &lt;&lt; \"对SGVsbG8sIHdvcmxkIQ==进行base64解码: \" &lt;&lt; b64decodestring(str2) &lt;&lt; std::endl; ///编码耗时测试 std::string str3(10000000, 'A'); //生成 10000000 长的字符串 std::cout &lt;&lt; std::endl &lt;&lt; \"对 10000000 长的字符串进行编码耗时测试..\" &lt;&lt; std::endl; size_t t0 = clock(); //编码计时开始 b64encodestring(str3); std::cout &lt;&lt; \"测试结束, 耗时 \" &lt;&lt; clock() - t0 &lt;&lt; \"ms\" &lt;&lt; std::endl; ///解码耗时测试 std::string str4 = b64encodestring(str3); //得到长度为 10000000 的字符串base64编码后的字符串 std::cout &lt;&lt; std::endl &lt;&lt; \"对 \" &lt;&lt; str4.length() &lt;&lt; \" 长的base64字符串进行解码耗时测试..\" &lt;&lt; std::endl; size_t t1 = clock(); //解码计时开始 b64decodestring(str3); std::cout &lt;&lt; \"测试结束, 耗时 \" &lt;&lt; clock() - t1 &lt;&lt; \"ms\" &lt;&lt; std::endl; return 0;}","link":"/2019/12/30/base64%E7%BC%96%E8%A7%A3%E7%A0%81c-%E5%AE%9E%E7%8E%B0/"},{"title":"用数组实现的环形无锁队列","text":"根据公司要求，实现无锁环形队列，利用c++11新特性原子操作，在多生产者多消费者模式下，可以保证线程安全，头文件如下代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212#ifndef _MPMC_QUEUE_H_#define _MPMC_QUEUE_H_#include &lt;atomic&gt;#include &lt;cassert&gt;#include &lt;limits&gt;#include &lt;memory&gt;#include &lt;new&gt; // std::hardware_destructive_interference_size#include &lt;stdexcept&gt;template &lt;typename T&gt;class MPMCQueue{public: explicit MPMCQueue(const size_t capacity)//构造，入参是size : capacity_(capacity), head_(0), tail_(0) { if (capacity_ &lt; 1) { throw std::invalid_argument(\"capacity &lt; 1\"); } size_t space = capacity * sizeof(Slot) + kCacheLineSize - 1; buf_ = malloc(space); if (buf_ == nullptr) { throw std::bad_alloc(); } void *buf = buf_; slots_ = reinterpret_cast&lt;Slot *&gt;( std::align(kCacheLineSize, capacity * sizeof(Slot), buf, space)); if (slots_ == nullptr) { free(buf_); throw std::bad_alloc(); } for (size_t i = 0; i &lt; capacity_; ++i) { new (&amp;slots_[i]) Slot(); } static_assert(sizeof(MPMCQueue&lt;T&gt;) % kCacheLineSize == 0, \"MPMCQueue&lt;T&gt; size must be a multiple of cache line size to \" \"prevent false sharing between adjacent queues\"); static_assert(sizeof(Slot) % kCacheLineSize == 0, \"Slot size must be a multiple of cache line size to prevent \" \"false sharing between adjacent slots\"); assert(reinterpret_cast&lt;size_t&gt;(slots_) % kCacheLineSize == 0 &amp;&amp; \"slots_ array must be aligned to cache line size to prevent false \" \"sharing between adjacent slots\"); assert(reinterpret_cast&lt;char *&gt;(&amp;tail_) - reinterpret_cast&lt;char *&gt;(&amp;head_) &gt;= static_cast&lt;std::ptrdiff_t&gt;(kCacheLineSize) &amp;&amp; \"head and tail must be a cache line apart to prevent false sharing\"); } ~MPMCQueue() noexcept { for (size_t i = 0; i &lt; capacity_; ++i) { slots_[i].~Slot(); } free(buf_); } MPMCQueue(const MPMCQueue &amp;) = delete; //删除默认拷贝构造函数，即不能进行默认拷贝 MPMCQueue &amp;operator=(const MPMCQueue &amp;) = delete; //删除默认赋值运算符 template &lt;typename... Args&gt; //可变参数模板 void emplace(Args &amp;&amp;... args) noexcept//满队列时阻塞，使用普通构造 { static_assert(std::is_nothrow_constructible&lt;T, Args &amp;&amp;...&gt;::value, \"T must be nothrow constructible with Args&amp;&amp;...\"); auto const head = head_.fetch_add(1); auto &amp;slot = slots_[idx(head)]; while (turn(head) * 2 != slot.turn.load(std::memory_order_acquire)) ; slot.construct(std::forward&lt;Args&gt;(args)...); slot.turn.store(turn(head) * 2 + 1, std::memory_order_release); } template &lt;typename... Args&gt; bool try_emplace(Args &amp;&amp;... args) noexcept//不阻塞，失败时返回false { static_assert(std::is_nothrow_constructible&lt;T, Args &amp;&amp;...&gt;::value, \"T must be nothrow constructible with Args&amp;&amp;...\"); auto head = head_.load(std::memory_order_acquire); for (;;) { auto &amp;slot = slots_[idx(head)]; if (turn(head) * 2 == slot.turn.load(std::memory_order_acquire)) { if (head_.compare_exchange_strong(head, head + 1)) { slot.construct(std::forward&lt;Args&gt;(args)...); slot.turn.store(turn(head) * 2 + 1, std::memory_order_release); return true; } } else { auto const prevHead = head; head = head_.load(std::memory_order_acquire); if (head == prevHead) { return false; } } } } void push(const T &amp;v) noexcept {//拷贝构造，阻塞 static_assert(std::is_nothrow_copy_constructible&lt;T&gt;::value, \"T must be nothrow copy constructible\"); emplace(v); } template &lt;typename P,typename = typename std::enable_if&lt;std::is_nothrow_constructible&lt;T, P &amp;&amp;&gt;::value&gt;::type&gt; void push(P &amp;&amp;v) noexcept {//拷贝构造，阻塞 emplace(std::forward&lt;P&gt;(v)); } bool try_push(const T &amp;v) noexcept {//拷贝构造，不阻塞 static_assert(std::is_nothrow_copy_constructible&lt;T&gt;::value, \"T must be nothrow copy constructible\"); return try_emplace(v); } template &lt;typename P,typename = typename std::enable_if&lt;std::is_nothrow_constructible&lt;T, P &amp;&amp;&gt;::value&gt;::type&gt; bool try_push(P &amp;&amp;v) noexcept {return try_emplace(std::forward&lt;P&gt;(v));} void pop(T &amp;v) noexcept//拷贝或者移动输出，阻塞 { auto const tail = tail_.fetch_add(1); auto &amp;slot = slots_[idx(tail)]; while (turn(tail) * 2 + 1 != slot.turn.load(std::memory_order_acquire)) ; v = slot.move(); slot.destroy(); slot.turn.store(turn(tail) * 2 + 2, std::memory_order_release); } bool try_pop(T &amp;v) noexcept//拷贝或者移动输出，不阻塞，返回失败 { auto tail = tail_.load(std::memory_order_acquire); for (;;) { auto &amp;slot = slots_[idx(tail)]; if (turn(tail) * 2 + 1 == slot.turn.load(std::memory_order_acquire)) { if (tail_.compare_exchange_strong(tail, tail + 1)) { v = slot.move(); slot.destroy(); slot.turn.store(turn(tail) * 2 + 2, std::memory_order_release); return true; } } else { auto const prevTail = tail; tail = tail_.load(std::memory_order_acquire); if (tail == prevTail) { return false; } } } }private: static_assert(std::is_nothrow_copy_assignable&lt;T&gt;::value || std::is_nothrow_move_assignable&lt;T&gt;::value, \"T must be nothrow copy or move assignable\"); static_assert(std::is_nothrow_destructible&lt;T&gt;::value, \"T must be nothrow destructible\"); constexpr size_t idx(size_t i) const noexcept { return i % capacity_; } constexpr size_t turn(size_t i) const noexcept { return i / capacity_; }#ifdef __cpp_lib_hardware_interference_size static constexpr size_t kCacheLineSize = std::hardware_destructive_interference_size;#else static constexpr size_t kCacheLineSize = 64;#endif struct Slot { //辅助容器，包装对象，可以字节对齐 ~Slot() noexcept { if (turn &amp; 1) { destroy(); } } template &lt;typename... Args&gt; void construct(Args &amp;&amp;... args) noexcept { static_assert(std::is_nothrow_constructible&lt;T, Args &amp;&amp;...&gt;::value, \"T must be nothrow constructible with Args&amp;&amp;...\"); new (&amp;storage) T(std::forward&lt;Args&gt;(args)...); } void destroy() noexcept { static_assert(std::is_nothrow_destructible&lt;T&gt;::value, \"T must be nothrow destructible\"); reinterpret_cast&lt;T *&gt;(&amp;storage)-&gt;~T(); } T &amp;&amp;move() noexcept { return reinterpret_cast&lt;T &amp;&amp;&gt;(storage); } alignas(kCacheLineSize)std::atomic&lt;size_t&gt; turn = { 0 }; typename std::aligned_storage&lt;sizeof(T), alignof(T)&gt;::type storage; };private: const size_t capacity_; Slot *slots_; void *buf_; alignas(kCacheLineSize)std::atomic&lt;size_t&gt; head_; alignas(kCacheLineSize)std::atomic&lt;size_t&gt; tail_;};#endif //_MPMC_QUEUE_H_ 测试文件如下 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950#include \"stdafx.h\"#include \"mpmcqueue.h\"#include \"stdio.h\"#include &lt;time.h&gt;#include &lt;thread&gt;using namespace std;int main(){ MPMCQueue&lt;int&gt; q(100); std::thread threads[4]; clock_t clockBegin, clockEnd; clockBegin = clock(); for (int i = 0; i != 2; ++i) { threads[i] = std::thread([&amp;](int i) { for (int j = 0; j != 50; ++j) { q.push(i * 10 + j); printf(\"thread %d push:%d\\n\",i, i*10+j); } }, i); } for (int i = 2; i != 4; ++i) { threads[i] = std::thread([&amp;]() { int item; for (int j = 0; j != 50; ++j) { q.pop(item); printf(\"thread %d pop:%d\\n\",i, item); } }); } for (int i = 0; i != 4; ++i) { threads[i].join(); } clockEnd = clock(); printf(\"%d\\n\", clockEnd - clockBegin); return 0;}","link":"/2019/12/30/%E7%94%A8%E6%95%B0%E7%BB%84%E5%AE%9E%E7%8E%B0%E7%9A%84%E7%8E%AF%E5%BD%A2%E6%97%A0%E9%94%81%E9%98%9F%E5%88%97/"},{"title":"c++文件读写操作","text":"ofstream头文件： 1234567ofstream out(\"out.txt\");if(out.is_open()){ out &lt;&lt; \"This is a line\\n\" ; out &lt;&lt; \"This is another line\\n\"; out.close();} 文件不存在时会自动创建文件当文件读写操作完成之后，我们必须将文件关闭以使文件重新变为可访问的。成员函数close()，它负责将缓存中的数据排放出来并关闭文件。这个函数一旦被调用，原先的流对象就可以被用来打开其它的文件了，这个文件也就可以重新被其它的进程所访问了。为防止流对象被销毁时还联系着打开的文件，析构函数将会自动调用关闭函数close。为了原来的内容不被覆盖，需要显示指定ofstream::app 1234567ofstream out(\"out.txt\", ofstream::app);if(out.is_open()){ out &lt;&lt; \"This is a line\\n\" ; out &lt;&lt; \"This is another line\\n\"; out.close();} ifstream头文件： (1) 读取方式：逐行读取，将行读入字符串，行只见那用回车换行区分 12345678910111213string str;ifstream in(&quot;out.txt&quot;);if(in.is_open()){ while(!in.eof()) { getline(in.str); cout &lt;&lt; str &lt;&lt; endl; }}else{ cout &lt;&lt; &quot;open file error&quot; &lt;&lt; endl;}","link":"/2019/12/31/c-%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99%E6%93%8D%E4%BD%9C/"}],"tags":[{"name":"c++","slug":"c","link":"/tags/c/"}],"categories":[{"name":"日常","slug":"日常","link":"/categories/%E6%97%A5%E5%B8%B8/"},{"name":"工作","slug":"工作","link":"/categories/%E5%B7%A5%E4%BD%9C/"}]}